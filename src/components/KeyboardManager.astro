---
import Github from "./icons/GithubIcon.astro";
import X from "./icons/XTwitterIcon.astro";
import Linkedin from "./icons/LinkedinIcon.astro";
import GlobeIcon from "./icons/GlobeIcon.astro";
import ExternalIcon from "./icons/ExternalIcon.astro";
import Button from "./Button.astro";
import CommandsIcon from "./icons/CommandsIcon.astro";
import { getLocaleCollection } from "@/data/getLocaleCollection";
import { defaultLang } from "@/i18n/ui";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const userData = await getLocaleCollection("user", Astro.currentLocale);
const currentLanguage = Astro.currentLocale;
const { profiles, name, url, blog } = userData.data;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const SOCIAL_ICONS: Record<string, string | any> = {
  Github,
  Linkedin,
  X,
};

const links = [
  {
    url,
    network: "Portfolio",
    username: name,
  },
  {
    url: blog,
    network: "Blog",
    username: name,
  },
  ...profiles,
];

const actions = [
  {
    id: "print",
    label: `üñ®Ô∏è ${t("actions.print")}`,
    keys: ["Ctrl", "p"],
  },
  {
    id: "theme",
    label: `üîÜ ${t("actions.theme")}`,
    keys: ["Ctrl", "l"],
  },
  {
    id: "download",
    label: `üìÑ ${t("actions.download")}`,
    keys: ["Ctrl", "d"],
  },
];
---

<footer
  id="command"
  class="sticky bottom-0 hidden cursor-pointer items-center justify-center border-t border-neutral-200 bg-neutral-50 px-2 py-1 text-sm text-neutral-500 select-none sm:flex print:hidden"
>
  {t("kbd.openMessage.1")}
  <kbd>Cmd</kbd> + <kbd>K</kbd>
  {t("kbd.openMessage.2")}
</footer>

<div
  class="fixed right-8 bottom-8 z-20 flex bg-neutral-50 sm:hidden print:hidden"
>
  <Button id="command">
    <CommandsIcon class="h-5 w-5 fill-neutral-500" />
  </Button>
</div>

<dialog
  id="commands"
  class="m-auto w-full max-w-lg rounded-lg bg-neutral-100 backdrop:bg-neutral-500/50 focus:outline-hidden print:hidden"
>
  <header
    class="flex items-center justify-between border-b border-neutral-300 px-3 py-2"
  >
    <h2 class="text-lg font-semibold">{t("kbd.title")}</h2>
    <button class="text-neutral-400 outline-hidden" close-dialog>X</button>
  </header>
  <div class="flex flex-col gap-3 py-2">
    <span class="ms-3 text-xs font-medium text-neutral-500"> Links </span>
    <ul>
      {
        links.map((link) => {
          const Icon = SOCIAL_ICONS[link.network] ?? GlobeIcon;
          return (
            <li>
              <a
                href={link.url}
                target="_blank"
                rel="noopener noreferrer"
                class="group flex w-full items-center justify-between border-x-4 border-transparent px-3 py-2 text-sm outline-hidden hover:border-l-cyan-500 hover:bg-sky-300/10"
              >
                <div class="flex items-center gap-2">
                  <Icon class="h-4 w-4 fill-neutral-500 group-hover:fill-neutral-600" />
                  {link.network}
                </div>
                <div class="rounded-md bg-neutral-200 p-0.5">
                  <ExternalIcon class="h-3.5 w-3.5 fill-neutral-500" />
                </div>
              </a>
            </li>
          );
        })
      }
    </ul>
    <span class="ms-3 text-xs font-medium text-neutral-500"> Actions </span>
    <ul>
      {
        actions.map((command) => (
          <li>
            <button
              class="flex w-full items-center justify-between border-x-4 border-transparent px-3 py-2 text-sm outline-hidden hover:border-l-cyan-500 hover:bg-sky-300/10"
              id={command.id}
            >
              <div>{command.label}</div>
              <div class="hidden text-neutral-500 sm:block">
                {command.keys.map((key, last) => (
                  <>
                    <kbd>{key}</kbd> {!last && "+"}
                  </>
                ))}
              </div>
            </button>
          </li>
        ))
      }
    </ul>
  </div>
  <footer class="flex items-center justify-center bg-neutral-200 px-2 text-xs">
    <span class="hidden sm:flex">
      {t("kbd.closeMessage.1")}
      <kbd>ESC</kbd>
      {t("kbd.closeMessage.or")}
      <kbd>Ctrl</kbd> + <kbd>k</kbd>
      {t("kbd.closeMessage.2")}.
    </span>
  </footer>
</dialog>

<style>
  kbd,
  .kbd {
    border-radius: 3px;
    background-color: var(--color-neutral-200);
    margin-inline: 0.25rem;
    padding-inline: 0.25rem;
    padding-block: 0.125rem;
    font-family: var(--font-mono);
    font-size: var(--text-xs);
    line-height: var(--text-xs--line-height);
  }
</style>

<script define:vars={{ currentLanguage, defaultLang, userName: name }} is:inline
>
  const commands = [
    {
      id: "command",
      key: "k",
      action: () =>
        commandDialog.open ? commandDialog.close() : commandDialog.showModal(),
    },
    { id: "print", key: "p", action: () => window.print() },
    {
      id: "theme",
      key: "l",
      action: () => {
        alert("Work in progress...");
      },
    },
    {
      id: "download",
      key: "d",
      action: () => {
        var link = document.createElement("a");
        link.setAttribute(
          "download",
          `${userName.replace(" ", "-")}-cv-${currentLanguage}`,
        );
        link.href = `/cv${currentLanguage !== defaultLang ? `-${currentLanguage}` : ""}.pdf`;
        document.body.appendChild(link);
        link.click();
        link.remove();
      },
    },
  ];

  for (let command of commands) {
    const buttons = document.querySelectorAll(`#${command.id}`);
    buttons?.forEach((button) =>
      button.addEventListener("click", command.action),
    );
  }

  const commandDialog = document.querySelector("#commands");

  const closeButton = commandDialog.querySelector("[close-dialog]");
  closeButton?.addEventListener("click", () => commandDialog.close());

  commandDialog.addEventListener("click", (event) => {
    const rect = commandDialog.getBoundingClientRect();
    const isInDialog =
      rect.top <= event.clientY &&
      event.clientY <= rect.top + rect.height &&
      rect.left <= event.clientX &&
      event.clientX <= rect.left + rect.width;
    if (!isInDialog) {
      commandDialog.close();
    }
  });

  document.addEventListener("keydown", (event) => {
    commands.forEach((command) => {
      if (event.ctrlKey && event.key === command.key) {
        event.preventDefault();
        command.action();
      }
    });
  });
</script>
